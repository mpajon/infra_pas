#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
    bind *:80
    bind *:443 ssl crt /etc/ssl/private/local.inetum.pem ssl-max-ver TLSv1.2

    acl is_portainer hdr_end(host) -i portainer.local.inetum.com
    acl is_gitlab hdr_end(host) -i gitlab.local.inetum.com
    acl is_nexus hdr_end(host) -i nexus.local.inetum.com
    acl is_registry hdr_end(host) -i registry.local.inetum.com
    acl is_jenkins hdr_end(host) -i jenkins.local.inetum.com
    acl is_sonarqube hdr_end(host) -i sonarqube.local.inetum.com
    acl is_vagrantbox hdr_end(host) -i vagrantbox.local.inetum.com
    acl is_performa hdr_end(host) -i performa.local.inetum.com
    acl is_keycloak hdr_end(host) -i keycloak.local.inetum.com
    acl is_kuma hdr_end(host) -i kuma.local.inetum.com
    acl is_portal hdr_end(host) -i portal.local.inetum.com

    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    http-request add-header X-Proto https if { ssl_fc }
    
    redirect scheme https code 301 if !{ ssl_fc } !is_vagrantbox !is_registry !is_keycloak

    use_backend portainer if is_portainer
    use_backend nexus if is_nexus
    use_backend registry if is_registry
    use_backend jenkins if is_jenkins
    use_backend gitlab if is_gitlab
    use_backend sonarqube if is_sonarqube
    use_backend vagrantbox if is_vagrantbox
    use_backend performa if is_performa
    use_backend keycloak if is_keycloak
    use_backend kuma if is_kuma
    use_backend portal if is_portal
    
    default_backend gitlab

backend portainer
    balance roundrobin
    server portainer1 127.0.0.1:9000 check

backend gitlab
    balance roundrobin
    server  gitlab1 127.0.0.1:10443 check

backend nexus
    balance roundrobin
    server  nexus1 127.0.0.1:8081 check

backend registry
    balance roundrobin
    server  nexus2 127.0.0.1:18000 check

backend jenkins
    balance roundrobin
    server  jenkins1 127.0.0.1:8080 check

backend sonarqube
   balance roundrobin
   server sonarqube1 127.0.0.1:9500 check

backend vagrantbox
   balance roundrobin
   server vagrantbox1 127.0.0.1:22280 check

backend performa
   balance roundrobin
   server performa1 127.0.0.1:5511 check

backend keycloak
   balance roundrobin
   server keycloak1 127.0.0.1:18080 check   

backend kuma
   balance roundrobin
   server kuma1 127.0.0.1:3001 check      

backend portal
   balance roundrobin
   server kuma1 127.0.0.1:9080 check    